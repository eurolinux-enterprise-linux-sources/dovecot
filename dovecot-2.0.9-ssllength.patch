diff -up dovecot-2.0.9/doc/example-config/conf.d/10-ssl.conf.ssllength dovecot-2.0.9/doc/example-config/conf.d/10-ssl.conf
--- dovecot-2.0.9/doc/example-config/conf.d/10-ssl.conf.ssllength	2015-12-17 17:41:14.440626413 +0100
+++ dovecot-2.0.9/doc/example-config/conf.d/10-ssl.conf	2015-12-17 17:42:18.976346431 +0100
@@ -37,6 +37,9 @@ ssl_key = </etc/ssl/private/dovecot.pem
 # entirely.
 #ssl_parameters_regenerate = 168
 
+# DH parameters length to use.
+#ssl_dh_parameters_length = 1024
+
 # SSL protocols to use
 #ssl_protocols = !SSLv2 !SSLv3
 
diff -up dovecot-2.0.9/src/login-common/ssl-proxy-openssl.c.ssllength dovecot-2.0.9/src/login-common/ssl-proxy-openssl.c
--- dovecot-2.0.9/src/login-common/ssl-proxy-openssl.c.ssllength	2015-12-17 17:41:14.430626457 +0100
+++ dovecot-2.0.9/src/login-common/ssl-proxy-openssl.c	2015-12-17 17:43:15.293102105 +0100
@@ -77,7 +77,7 @@ struct ssl_parameters {
 	time_t last_refresh;
 	int fd;
 
-	DH *dh_512, *dh_1024;
+	DH *dh_512, *dh_default;
 };
 
 struct ssl_server_context {
@@ -143,10 +143,9 @@ static int ssl_server_context_cmp(const
 	return ctx1->verify_client_cert == ctx2->verify_client_cert ? 0 : 1;
 }
 
-static void ssl_params_corrupted(void)
+static void ssl_params_corrupted(const char *reason)
 {
-	i_fatal("Corrupted SSL parameters file: "
-		PKG_STATEDIR"/ssl-parameters.dat");
+	i_fatal("Corrupted SSL ssl-parameters.dat in state_dir: %s", reason);
 }
 
 static void read_next(struct ssl_parameters *params, void *data, size_t size)
@@ -156,7 +155,7 @@ static void read_next(struct ssl_paramet
 	if ((ret = read_full(params->fd, data, size)) < 0)
 		i_fatal("read(%s) failed: %m", params->path);
 	if (ret == 0)
-		ssl_params_corrupted();
+		ssl_params_corrupted("Truncated file");
 }
 
 static bool read_dh_parameters_next(struct ssl_parameters *params)
@@ -175,7 +174,7 @@ static bool read_dh_parameters_next(stru
 	/* read data size. */
 	read_next(params, &len, sizeof(len));
 	if (len > 1024*100) /* should be enough? */
-		ssl_params_corrupted();
+		ssl_params_corrupted("File too large");
 
 	buf = i_malloc(len);
 	read_next(params, buf, len);
@@ -183,13 +182,15 @@ static bool read_dh_parameters_next(stru
 	cbuf = buf;
 	switch (bits) {
 	case 512:
+		if (params->dh_512 != NULL)
+			ssl_params_corrupted("Duplicate 512bit parameters");
 		params->dh_512 = d2i_DHparams(NULL, &cbuf, len);
 		break;
-	case 1024:
-		params->dh_1024 = d2i_DHparams(NULL, &cbuf, len);
-		break;
 	default:
-		ssl_params_corrupted();
+		if (params->dh_default != NULL)
+			ssl_params_corrupted("Duplicate default parameters");
+		params->dh_default = d2i_DHparams(NULL, &cbuf, len);
+		break;
 	}
 
 	i_free(buf);
@@ -202,9 +203,9 @@ static void ssl_free_parameters(struct s
 		DH_free(params->dh_512);
                 params->dh_512 = NULL;
 	}
-	if (params->dh_1024 != NULL) {
-		DH_free(params->dh_1024);
-                params->dh_1024 = NULL;
+	if (params->dh_default != NULL) {
+		DH_free(params->dh_default);
+                params->dh_default = NULL;
 	}
 }
 
@@ -231,7 +232,7 @@ static void ssl_refresh_parameters(struc
 		i_fatal("read(%s) failed: %m", params->path);
 	else if (ret != 0) {
 		/* more data than expected */
-		ssl_params_corrupted();
+		ssl_params_corrupted("More data than expected");
 	}
 
 	if (close(params->fd) < 0)
@@ -876,12 +877,10 @@ static RSA *ssl_gen_rsa_key(SSL *ssl ATT
 static DH *ssl_tmp_dh_callback(SSL *ssl ATTR_UNUSED,
 			       int is_export, int keylength)
 {
-	/* Well, I'm not exactly sure why the logic in here is this.
-	   It's the same as in Postfix, so it can't be too wrong. */
 	if (is_export && keylength == 512 && ssl_params.dh_512 != NULL)
 		return ssl_params.dh_512;
 
-	return ssl_params.dh_1024;
+	return ssl_params.dh_default;
 }
 
 static void ssl_info_callback(const SSL *ssl, int where, int ret)
diff -up dovecot-2.0.9/src/ssl-params/main.c.ssllength dovecot-2.0.9/src/ssl-params/main.c
--- dovecot-2.0.9/src/ssl-params/main.c.ssllength	2015-12-17 17:41:14.422626491 +0100
+++ dovecot-2.0.9/src/ssl-params/main.c	2015-12-17 17:41:14.438626422 +0100
@@ -1,4 +1,4 @@
-/* Copyright (c) 2009-2010 Dovecot authors, see the included COPYING file */
+/* Copyright (c) 2009-2014 Dovecot authors, see the included COPYING file */
 
 #include "lib.h"
 #include "lib-signals.h"
@@ -6,6 +6,7 @@
 #include "ostream.h"
 #include "restrict-access.h"
 #include "master-service.h"
+#include "master-service-settings.h"
 #include "ssl-params-settings.h"
 #include "ssl-params.h"
 
@@ -21,7 +22,7 @@ struct client {
 };
 
 static ARRAY_DEFINE(delayed_fds, int);
-struct ssl_params *param;
+static struct ssl_params *param;
 static buffer_t *ssl_params;
 static struct timeout *to_startup;
 
@@ -47,9 +48,9 @@ static void client_handle(int fd)
 	struct ostream *output;
 
 	output = o_stream_create_fd(fd, (size_t)-1, TRUE);
-	o_stream_send(output, ssl_params->data, ssl_params->used);
-
-	if (o_stream_get_buffer_used_size(output) == 0)
+	fd = -1; // from missing o_stream_create_fd_autoclose
+	if (o_stream_send(output, ssl_params->data, ssl_params->used) < 0 ||
+	    o_stream_get_buffer_used_size(output) == 0)
 		client_deinit(output);
 	else {
 		o_stream_set_flush_callback(output, client_output_flush,
@@ -84,8 +85,11 @@ static void ssl_params_callback(const un
 		   ran us at startup to make sure ssl parameters are generated
 		   asap. if we're here because of that, don't bother hanging
 		   around to see if we get any client connections. */
-		to_startup = timeout_add(STARTUP_IDLE_TIMEOUT_MSECS,
-					 master_service_stop, master_service);
+		if (to_startup == NULL) {
+			to_startup = timeout_add(STARTUP_IDLE_TIMEOUT_MSECS,
+						 master_service_stop,
+						 master_service);
+		}
 		return;
 	}
 
@@ -113,11 +117,16 @@ static void sig_chld(const siginfo_t *si
 
 static void main_init(const struct ssl_params_settings *set)
 {
+	const struct master_service_settings *service_set;
+	const char *filename;
+
 	lib_signals_set_handler(SIGCHLD, TRUE, sig_chld, NULL);
 
 	ssl_params = buffer_create_dynamic(default_pool, 1024);
-	param = ssl_params_init(PKG_STATEDIR"/"SSL_BUILD_PARAM_FNAME,
-				ssl_params_callback, set);
+	service_set = master_service_settings_get(master_service);
+	filename = t_strconcat(PKG_STATEDIR"/"SSL_BUILD_PARAM_FNAME, 
+			       NULL);
+	param = ssl_params_init(filename, ssl_params_callback, set);
 }
 
 static void main_deinit(void)
@@ -133,8 +142,7 @@ int main(int argc, char *argv[])
 {
 	const struct ssl_params_settings *set;
 
-	master_service = master_service_init("ssl-params", 0,
-					     &argc, &argv, NULL);
+	master_service = master_service_init("ssl-params", 0, &argc, &argv, "");
 	master_service_init_log(master_service, "ssl-params: ");
 
 	if (master_getopt(master_service) > 0)
@@ -144,13 +152,12 @@ int main(int argc, char *argv[])
 	restrict_access_by_env(NULL, FALSE);
 	restrict_access_allow_coredumps(TRUE);
 
-	master_service_init_finish(master_service);
-
 #ifndef HAVE_SSL
 	i_fatal("Dovecot built without SSL support");
 #endif
 
 	main_init(set);
+	master_service_init_finish(master_service);
 	master_service_run(master_service, client_connected);
 	main_deinit();
 
diff -up dovecot-2.0.9/src/ssl-params/ssl-params.c.ssllength dovecot-2.0.9/src/ssl-params/ssl-params.c
--- dovecot-2.0.9/src/ssl-params/ssl-params.c.ssllength	2010-01-25 00:16:47.000000000 +0100
+++ dovecot-2.0.9/src/ssl-params/ssl-params.c	2015-12-17 17:41:14.439626418 +0100
@@ -1,10 +1,12 @@
-/* Copyright (c) 2009-2010 Dovecot authors, see the included COPYING file */
+/* Copyright (c) 2009-2014 Dovecot authors, see the included COPYING file */
 
 #include "lib.h"
 #include "ioloop.h"
 #include "buffer.h"
 #include "file-lock.h"
 #include "read-full.h"
+#include "master-interface.h"
+#include "master-service.h"
 #include "master-service-settings.h"
 #include "ssl-params-settings.h"
 #include "ssl-params.h"
@@ -20,7 +22,7 @@
 #  include <sys/resource.h>
 #endif
 
-#define MAX_PARAM_FILE_SIZE 1024
+#define MAX_PARAM_FILE_SIZE 1024*1024
 #define SSL_BUILD_PARAM_TIMEOUT_SECS (60*30)
 #define SSL_PARAMS_PRIORITY 15
 
@@ -29,11 +31,12 @@ struct ssl_params {
 	struct ssl_params_settings set;
 
 	time_t last_mtime;
-	struct timeout *to_rebuild;
 	ssl_params_callback_t *callback;
 };
 
-static void ssl_params_if_unchanged(const char *path, time_t mtime)
+static void
+ssl_params_if_unchanged(const char *path, time_t mtime,
+			unsigned int ssl_dh_parameters_length ATTR_UNUSED)
 {
 	const char *temp_path;
 	struct file_lock *lock;
@@ -97,7 +100,7 @@ static void ssl_params_if_unchanged(cons
 
 	i_info("Generating SSL parameters");
 #ifdef HAVE_SSL
-	ssl_generate_parameters(fd, temp_path);
+	ssl_generate_parameters(fd, ssl_dh_parameters_length, temp_path);
 #endif
 
 	if (rename(temp_path, path) < 0)
@@ -109,17 +112,33 @@ static void ssl_params_if_unchanged(cons
 	i_info("SSL parameters regeneration completed");
 }
 
-static void ssl_params_rebuild(struct ssl_params *param)
+static void ssl_params_close_listeners(void)
 {
-	if (param->to_rebuild != NULL)
-		timeout_remove(&param->to_rebuild);
+	unsigned int i;
+
+	/* we have forked, but the fds are still shared. we can't go
+	   io_remove()ing the fds from ioloop, because with many ioloops
+	   (e.g. epoll) the fds get removed from the main process's ioloop
+	   as well. so we'll just do the closing here manually. */
+	for (i = 0; i < master_service_get_socket_count(master_service); i++) {
+		int fd = MASTER_LISTEN_FD_FIRST + i;
+
+		if (close(fd) < 0)
+			i_error("close(listener %d) failed: %m", fd);
+	}
+}
 
+static void ssl_params_rebuild(struct ssl_params *param)
+{
 	switch (fork()) {
 	case -1:
 		i_fatal("fork() failed: %m");
 	case 0:
-		/* child */
-		ssl_params_if_unchanged(param->path, param->last_mtime);
+		/* child - close listener fds so a long-running ssl-params
+		   doesn't cause Dovecot restart to fail */
+		ssl_params_close_listeners();
+		ssl_params_if_unchanged(param->path, param->last_mtime,
+					param->set.ssl_dh_parameters_length);
 		exit(0);
 	default:
 		/* parent */
@@ -127,27 +146,38 @@ static void ssl_params_rebuild(struct ss
 	}
 }
 
-static void ssl_params_set_timeout(struct ssl_params *param)
-{
-	time_t next_rebuild, diff;
-
-	if (param->to_rebuild != NULL)
-		timeout_remove(&param->to_rebuild);
-	if (param->set.ssl_parameters_regenerate == 0)
-		return;
-
-	next_rebuild = param->last_mtime +
-		param->set.ssl_parameters_regenerate * 3600;
-
-	if (ioloop_time >= next_rebuild) {
-		ssl_params_rebuild(param);
-		return;
+static bool
+ssl_params_verify(struct ssl_params *param,
+		  const unsigned char *data, size_t size)
+{
+	unsigned int bitsize, len;
+	bool found = FALSE;
+
+	/* <bitsize><length><data>... */
+	while (size >= sizeof(bitsize)) {
+		memcpy(&bitsize, data, sizeof(bitsize));
+		if (bitsize == 0) {
+			if (found)
+				return TRUE;
+			i_warning("Regenerating %s for ssl_dh_parameters_length=%u",
+				  param->path, param->set.ssl_dh_parameters_length);
+			return FALSE;
+		}
+		data += sizeof(bitsize);
+		size -= sizeof(bitsize);
+		if (bitsize == param->set.ssl_dh_parameters_length)
+			found = TRUE;
+
+		if (size < sizeof(len))
+			break;
+		memcpy(&len, data, sizeof(len));
+		if (len > size - sizeof(len))
+			break;
+		data += sizeof(bitsize) + len;
+		size -= sizeof(bitsize) + len;
 	}
-
-	diff = next_rebuild - ioloop_time;
-	if (diff > INT_MAX / 1000)
-		diff = INT_MAX / 1000;
-	param->to_rebuild = timeout_add(diff * 1000, ssl_params_rebuild, param);
+	i_error("Corrupted %s", param->path);
+	return FALSE;
 }
 
 static int ssl_params_read(struct ssl_params *param)
@@ -168,8 +198,10 @@ static int ssl_params_read(struct ssl_pa
 		(void)close(fd);
 		return -1;
 	}
+	param->last_mtime = st.st_mtime;
 	if (st.st_size == 0 || st.st_size > MAX_PARAM_FILE_SIZE) {
 		i_error("Corrupted file: %s", param->path);
+		close(fd);
 		(void)unlink(param->path);
 		return -1;
 	}
@@ -181,9 +213,9 @@ static int ssl_params_read(struct ssl_pa
 	else if (ret == 0) {
 		i_error("File unexpectedly shrank: %s", param->path);
 		ret = -1;
+	} else if (!ssl_params_verify(param, buffer, st.st_size)) {
+		ret = -1;
 	} else {
-		param->last_mtime = st.st_mtime;
-		ssl_params_set_timeout(param);
 		param->callback(buffer, st.st_size);
 	}
 
@@ -217,8 +249,6 @@ void ssl_params_deinit(struct ssl_params
 	struct ssl_params *param = *_param;
 
 	*_param = NULL;
-	if (param->to_rebuild != NULL)
-		timeout_remove(&param->to_rebuild);
 	i_free(param->path);
 	i_free(param);
 }
diff -up dovecot-2.0.9/src/ssl-params/ssl-params.h.ssllength dovecot-2.0.9/src/ssl-params/ssl-params.h
--- dovecot-2.0.9/src/ssl-params/ssl-params.h.ssllength	2010-01-19 12:55:08.000000000 +0100
+++ dovecot-2.0.9/src/ssl-params/ssl-params.h	2015-12-17 17:41:14.439626418 +0100
@@ -12,6 +12,6 @@ void ssl_params_deinit(struct ssl_params
 
 void ssl_params_refresh(struct ssl_params *param);
 
-void ssl_generate_parameters(int fd, const char *fname);
+void ssl_generate_parameters(int fd, unsigned int dh_length, const char *fname);
 
 #endif
diff -up dovecot-2.0.9/src/ssl-params/ssl-params-openssl.c.ssllength dovecot-2.0.9/src/ssl-params/ssl-params-openssl.c
--- dovecot-2.0.9/src/ssl-params/ssl-params-openssl.c.ssllength	2010-01-25 00:16:12.000000000 +0100
+++ dovecot-2.0.9/src/ssl-params/ssl-params-openssl.c	2015-12-17 17:41:14.439626418 +0100
@@ -1,4 +1,4 @@
-/* Copyright (c) 2002-2010 Dovecot authors, see the included COPYING file */
+/* Copyright (c) 2002-2014 Dovecot authors, see the included COPYING file */
 
 #include "lib.h"
 #include "write-full.h"
@@ -13,8 +13,6 @@
    default.. */
 #define DH_GENERATOR 2
 
-static int dh_param_bitsizes[] = { 512, 1024 };
-
 static const char *ssl_last_error(void)
 {
 	unsigned long err;
@@ -31,16 +29,14 @@ static const char *ssl_last_error(void)
 	return buf;
 }
 
-static void generate_dh_parameters(int bitsize, int fd, const char *fname)
+static bool generate_dh_parameters(int bitsize, int fd, const char *fname)
 {
         DH *dh = DH_generate_parameters(bitsize, DH_GENERATOR, NULL, NULL);
 	unsigned char *buf, *p;
 	int len;
 
-	if (dh == NULL) {
-		i_fatal("DH_generate_parameters(bits=%d, gen=%d) failed: %s",
-			bitsize, DH_GENERATOR, ssl_last_error());
-	}
+	if (dh == NULL)
+		return FALSE;
 
 	len = i2d_DHparams(dh, NULL);
 	if (len < 0)
@@ -54,15 +50,19 @@ static void generate_dh_parameters(int b
 	    write_full(fd, buf, len) < 0)
 		i_fatal("write_full() failed for file %s: %m", fname);
 	i_free(buf);
+	return TRUE;
 }
 
-void ssl_generate_parameters(int fd, const char *fname)
+void ssl_generate_parameters(int fd, unsigned int dh_length, const char *fname)
 {
-	unsigned int i;
 	int bits;
 
-	for (i = 0; i < N_ELEMENTS(dh_param_bitsizes); i++)
-		generate_dh_parameters(dh_param_bitsizes[i], fd, fname);
+	/* this fails in FIPS mode */
+	(void)generate_dh_parameters(512, fd, fname);
+	if (!generate_dh_parameters(dh_length, fd, fname)) {
+		i_fatal("DH_generate_parameters(bits=%d, gen=%d) failed: %s",
+			dh_length, DH_GENERATOR, ssl_last_error());
+	}
 	bits = 0;
 	if (write_full(fd, &bits, sizeof(bits)) < 0)
 		i_fatal("write_full() failed for file %s: %m", fname);
diff -up dovecot-2.0.9/src/ssl-params/ssl-params-settings.c.ssllength dovecot-2.0.9/src/ssl-params/ssl-params-settings.c
--- dovecot-2.0.9/src/ssl-params/ssl-params-settings.c.ssllength	2010-12-30 10:42:54.000000000 +0100
+++ dovecot-2.0.9/src/ssl-params/ssl-params-settings.c	2015-12-17 17:41:14.439626418 +0100
@@ -1,4 +1,4 @@
-/* Copyright (c) 2009-2010 Dovecot authors, see the included COPYING file */
+/* Copyright (c) 2009-2014 Dovecot authors, see the included COPYING file */
 
 #include "lib.h"
 #include "buffer.h"
@@ -13,13 +13,15 @@
 
 /* <settings checks> */
 static struct file_listener_settings ssl_params_unix_listeners_array[] = {
+	{ "ssl-params", 0666, "", "" },
 	{ "login/ssl-params", 0666, "", "" }
 };
 static struct file_listener_settings *ssl_params_unix_listeners[] = {
-	&ssl_params_unix_listeners_array[0]
+	&ssl_params_unix_listeners_array[0],
+	&ssl_params_unix_listeners_array[1]
 };
 static buffer_t ssl_params_unix_listeners_buf = {
-	ssl_params_unix_listeners, sizeof(ssl_params_unix_listeners), { 0, }
+	ssl_params_unix_listeners, sizeof(ssl_params_unix_listeners), { NULL, }
 };
 /* </settings checks> */
 
@@ -58,13 +60,15 @@ struct service_settings ssl_params_servi
 	{ type, #name, offsetof(struct ssl_params_settings, name), NULL }
 
 static const struct setting_define ssl_params_setting_defines[] = {
-	DEF(SET_UINT, ssl_parameters_regenerate),
+	DEF(SET_TIME, ssl_parameters_regenerate),
+	DEF(SET_UINT, ssl_dh_parameters_length),
 
 	SETTING_DEFINE_LIST_END
 };
 
 static const struct ssl_params_settings ssl_params_default_settings = {
-	.ssl_parameters_regenerate = 24*7
+	.ssl_parameters_regenerate = 0,
+	.ssl_dh_parameters_length = 1024
 };
 
 const struct setting_parser_info ssl_params_setting_parser_info = {
diff -up dovecot-2.0.9/src/ssl-params/ssl-params-settings.h.ssllength dovecot-2.0.9/src/ssl-params/ssl-params-settings.h
--- dovecot-2.0.9/src/ssl-params/ssl-params-settings.h.ssllength	2010-01-19 12:55:08.000000000 +0100
+++ dovecot-2.0.9/src/ssl-params/ssl-params-settings.h	2015-12-17 17:41:14.440626413 +0100
@@ -5,6 +5,7 @@ struct master_service;
 
 struct ssl_params_settings {
 	unsigned int ssl_parameters_regenerate;
+	unsigned int ssl_dh_parameters_length;
 };
 
 struct ssl_params_settings *
